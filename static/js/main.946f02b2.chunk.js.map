{"version":3,"sources":["components/User/Signin.js","components/Layout/Header.js","components/Layout/Home.js","components/User/Signup.js","App.js","serviceWorker.js","index.js"],"names":["Signin","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","setState","defineProperty","target","id","value","handleSubmit","preventDefault","fetch","method","headers","Accept","Content-Type","body","JSON","stringify","state","then","response","status","localStorage","setItem","username","redirect","alert","password","length","react_default","a","createElement","Redirect","push","to","className","onSubmit","reactstrap_es","for","autoFocus","type","onChange","block","disabled","validateForm","Link","Component","Header","toggle","bind","assertThisInitialized","logout","isOpen","removeItem","history","login","getItem","Fragment","color","light","expand","href","onClick","navbar","withRouter","Home","Layout_Header","Register","_ref","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","stop","_x","apply","arguments","email","confirmPassword","App","console","log","process","BrowserRouter","basename","Switch","Route","exact","path","component","Login","Signup","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.946f02b2.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Button, FormGroup, Label, Input } from \"reactstrap\";\r\nimport { Redirect, Link } from \"react-router-dom\";\r\nimport \"./Signin.css\";\r\n\r\nclass Signin extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      redirect: false,\r\n      username: \"\",\r\n      password: \"\"\r\n    };\r\n  }\r\n  //input field validation\r\n  validateForm() {\r\n    return this.state.username.length > 0 && this.state.password.length > 0;\r\n  }\r\n  //on change set state\r\n  handleChange = event => {\r\n    this.setState({\r\n      [event.target.id]: event.target.value\r\n    });\r\n  };\r\n  //submit form data\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n    fetch(\"http://localhost:8000/api/login\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(this.state)\r\n    }).then(response => {\r\n      if (response.status === 200) {\r\n        // set user info in localstorage\r\n        localStorage.setItem(\"username\", this.state.username);\r\n        localStorage.setItem(\"login\", true);\r\n\r\n        this.setState({ redirect: true });\r\n      } else if (response.status === 401) {\r\n        alert(\"Username password does not match.\");\r\n      }\r\n    });\r\n  };\r\n  render() {\r\n    const { redirect } = this.state;\r\n    if (redirect) {\r\n      return <Redirect push to=\"/home\" />;\r\n    }\r\n    return (\r\n      <div className=\"Login\">\r\n        <form onSubmit={this.handleSubmit}>\r\n          <FormGroup>\r\n            <Label for=\"username\">Username</Label>\r\n            <Input\r\n              id=\"username\"\r\n              autoFocus\r\n              type=\"text\"\r\n              value={this.state.username}\r\n              onChange={this.handleChange}\r\n            />\r\n          </FormGroup>\r\n          <FormGroup>\r\n            <Label for=\"password\">Password</Label>\r\n            <Input\r\n              id=\"password\"\r\n              value={this.state.password}\r\n              onChange={this.handleChange}\r\n              type=\"password\"\r\n            />\r\n          </FormGroup>\r\n          <Button\r\n            className=\"login-btn\"\r\n            block\r\n            disabled={!this.validateForm()}\r\n            type=\"submit\"\r\n          >\r\n            Login\r\n          </Button>\r\n          <Link className=\"signup-text\" to=\"/signup\">\r\n            Signup\r\n          </Link>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Signin;\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink\r\n} from \"reactstrap\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nclass Header extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.toggle = this.toggle.bind(this);\r\n    this.logout = this.logout.bind(this);\r\n    this.state = {\r\n      isOpen: false\r\n    };\r\n  }\r\n  logout() {\r\n    localStorage.removeItem(\"username\");\r\n    localStorage.removeItem(\"login\");\r\n    this.props.history.push(\"/login\");\r\n  }\r\n  toggle() {\r\n    this.setState({\r\n      isOpen: !this.state.isOpen\r\n    });\r\n  }\r\n  render() {\r\n    const login = localStorage.getItem(\"login\");\r\n    return (\r\n      <React.Fragment>\r\n        <Navbar color=\"light\" light expand=\"md\">\r\n          <NavbarBrand href=\"/home\">McKinley&Rice</NavbarBrand>\r\n          <NavbarToggler onClick={this.toggle} />\r\n          <Collapse isOpen={this.state.isOpen} navbar>\r\n            <Nav className=\"ml-auto\" navbar>\r\n              {login ? (\r\n                <React.Fragment>\r\n                  <NavItem>\r\n                    <NavLink href=\"#\" onClick={this.logout}>\r\n                      Logout\r\n                    </NavLink>\r\n                  </NavItem>\r\n                  <NavItem>\r\n                    <NavLink className=\"user\" href=\"#\">\r\n                      Hello,{this.props.username}\r\n                    </NavLink>\r\n                  </NavItem>\r\n                </React.Fragment>\r\n              ) : (\r\n                <NavItem>\r\n                  <NavLink href=\"/login\">Login</NavLink>\r\n                </NavItem>\r\n              )}\r\n            </Nav>\r\n          </Collapse>\r\n        </Navbar>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(Header);\r\n","import React, { Component } from \"react\";\r\nimport Header from \"./Header\";\r\nimport \"./Home.css\";\r\nimport { withRouter } from \"react-router-dom\";\r\nclass Home extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      username: \"\"\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    const login = localStorage.getItem(\"login\");\r\n    if (!login) {\r\n      this.props.history.push(\"/login\");\r\n    }\r\n    const username = localStorage.getItem(\"username\");\r\n    this.setState({ username });\r\n  }\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Header username={this.state.username} />\r\n        <div className=\"home-text\">\r\n          <p>Welcome To McKinley&Rice</p>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(Home);\r\n","import React, { Component } from \"react\";\r\nimport { Button, FormGroup, Label, Input } from \"reactstrap\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport Header from \"../Layout/Header\";\r\nimport \"./Signup.css\";\r\n\r\nclass Register extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      redirect: false,\r\n      username: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n      confirmPassword: \"\"\r\n    };\r\n  }\r\n  //input fields validation\r\n  validateForm() {\r\n    return (\r\n      this.state.username.length > 0 &&\r\n      this.state.email.length > 0 &&\r\n      this.state.password.length > 0 &&\r\n      this.state.confirmPassword.length > 0 &&\r\n      this.state.password === this.state.confirmPassword\r\n    );\r\n  }\r\n  //on change set state\r\n  handleChange = event => {\r\n    this.setState({\r\n      [event.target.id]: event.target.value\r\n    });\r\n  };\r\n  //submit form data\r\n  handleSubmit = async event => {\r\n    event.preventDefault();\r\n    fetch(\"http://localhost:8000/api/signup\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(this.state)\r\n    }).then(response => {\r\n      if (response.status === 200) {\r\n        this.setState({ redirect: true });\r\n      }\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { redirect } = this.state;\r\n    if (redirect) {\r\n      return <Redirect push to=\"/home\" />;\r\n    }\r\n    return (\r\n      <React.Fragment>\r\n        <Header />\r\n        <div className=\"Signup\">\r\n          <form onSubmit={this.handleSubmit}>\r\n            <FormGroup>\r\n              <Label for=\"username\">Username</Label>\r\n              <Input\r\n                id=\"username\"\r\n                autoFocus\r\n                type=\"text\"\r\n                value={this.state.username}\r\n                onChange={this.handleChange}\r\n              />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label for=\"email\">Email</Label>\r\n              <Input\r\n                id=\"email\"\r\n                type=\"email\"\r\n                value={this.state.email}\r\n                onChange={this.handleChange}\r\n              />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label for=\"password\">Password</Label>\r\n              <Input\r\n                id=\"password\"\r\n                value={this.state.password}\r\n                onChange={this.handleChange}\r\n                type=\"password\"\r\n              />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label for=\"confirmPassword\">Confirm Password</Label>\r\n              <Input\r\n                id=\"confirmPassword\"\r\n                value={this.state.confirmPassword}\r\n                onChange={this.handleChange}\r\n                type=\"password\"\r\n              />\r\n            </FormGroup>\r\n\r\n            <Button\r\n              className=\"login-btn\"\r\n              block\r\n              disabled={!this.validateForm()}\r\n              type=\"submit\"\r\n            >\r\n              Signup\r\n            </Button>\r\n          </form>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Register;\r\n","import React, { Component } from \"react\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport Login from \"./components/User/Signin\";\r\nimport Home from \"./components/Layout/Home\";\r\nimport Signup from \"./components/User/Signup\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    console.log(\"This is the process.env\", process.env.PUBLIC_URL);\r\n    return (\r\n      <Router basename={process.env.PUBLIC_URL}>\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Home} />\r\n          <Route exact path=\"/login\" component={Login} />\r\n          <Route exact path=\"/home\" component={Home} />\r\n          <Route exact path=\"/signup\" component={Signup} />\r\n        </Switch>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}